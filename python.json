{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"CP Template": {
		"prefix": "cp",
		"body": [
			"import sys",
			"import threading",
			"import bisect",
			"import heapq",
			"import math",
			"from collections import defaultdict, deque, Counter",
			"from itertools import combinations, permutations, accumulate",
			"from functools import lru_cache, reduce",
			"",
			"# Macros",
			"def input(): return sys.stdin.readline().rstrip()",
			"def INT(): return int(input())",
			"def MAP(): return map(int, input().split())",
			"def LIST(): return list(map(int, input().split()))",
			"",
			"# Aliases and Constants",
			"INF = float('inf')",
			"MOD = 10**9 + 7",
			"PI = math.pi",
			"",
			"",
			"",
			"def solve():",
			"\tt: int = 1",
			"\t",
			"\t${1:# t = INT()}       # Uncomment the following line if there are multiple test cases",
			"\tfor _ in range(t):",
			"\t\t${0:# Example input processing:",
			"\t\t# n = INT()",
			"\t\t# arr = LIST()",
			"\t\t# s = STR()",
			"",
			"\t\t# Your code here",
			"\t\tpass}",
			"",
			"",
			"",
			"def main():",
			"\tthreading.Thread(target=solve).start()",
			"",
			"if __name__ == \"__main__\":",
			"\tsys.setrecursionlimit(1 << 25)",
			"\tmain()",
			""
		],
		"description": "CP Template"
	}
}